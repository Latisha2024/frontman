// Prisma schema for MongoDB
// All id fields fixed with @db.ObjectId
// All relation fields fixed
// All types corrected for Prisma MongoDB compatibility

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  SalesManager
  ExternalSeller
  Accountant
  Distributor
  FieldExecutive
  Worker
}

enum StockStatus {
  Available
  Moved
  Missing
}

enum OrderStatus {
  Pending
  Completed
  Cancelled
}

enum FollowUpStatus {
  Pending
  Completed
  Postponed
}

enum TransactionType {
  Earned
  Claimed
  Adjusted
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  phone     String
  password  String
  role      UserRole

  admin           Admin?
  salesManager    SalesManager?
  externalSeller  ExternalSeller?
  accountant      Accountant?
  distributor     Distributor?
  fieldExecutive  FieldExecutive?
  worker          Worker?

  attendances     Attendance[]
  transactions    PointTransaction[]
  incentives      Incentive[] @relation("IncentiveAssigned")
  deliveryReports DeliveryReport[]
  orders          Order[]
  liveLocations   LiveLocation[]
  ShiftAlert      ShiftAlert[]
<<<<<<< HEAD
=======
  registeredWarranties RegisterWarranty[]
  postDeliveryReports PostDeliveryReport[]
  commissionedWorks   CommissionedWork[]
>>>>>>> 04113530de9832f4179ec37bc2135fedf490d6b5
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
}

model SalesManager {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
}

model ExternalSeller {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
}

model Accountant {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
}

model Distributor {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
}

model FieldExecutive {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  userId        String              @unique @db.ObjectId
  user          User                @relation(fields: [userId], references: [id])
  followUps     CustomerFollowUp[]
  dvrReports    DVR[]
}

model Worker {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
}

model Product {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  price            Float
  stockQuantity    Int
  warrantyPeriodInMonths Int

  stocks           Stock[]
  warrantyCards    WarrantyCard[]
  orderItems       OrderItem[]
<<<<<<< HEAD
=======
  registeredWarranties RegisterWarranty[]
>>>>>>> 04113530de9832f4179ec37bc2135fedf490d6b5
}

model Stock {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  productId String       @db.ObjectId
  status    StockStatus
  location  String

  product   Product      @relation(fields: [productId], references: [id])
}

model WarrantyCard {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  productId      String   @db.ObjectId
  serialNumber   String
  purchaseDate   DateTime
  expiryDate     DateTime
  scanQR         String
  validViaWarranIQ String

  product        Product  @relation(fields: [productId], references: [id])
}

model Attendance {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  date       DateTime
  checkIn    DateTime
  checkOut   DateTime?

  user       User     @relation(fields: [userId], references: [id])
}

model CustomerFollowUp {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  executiveId    String          @db.ObjectId
  customerName   String
  contactDetails String
  feedback       String
  status         FollowUpStatus
  nextFollowUpDate DateTime

  executive      FieldExecutive  @relation(fields: [executiveId], references: [id])
}

model PointTransaction {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  userId     String          @db.ObjectId
  points     Int
  creditAmount Float
  date       DateTime
  reason     String
  type       TransactionType

  user       User            @relation(fields: [userId], references: [id])
}

model Incentive {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  points      Int
  assignedId  String   @db.ObjectId
  assignedAt  DateTime

  assignedTo  User     @relation("IncentiveAssigned", fields: [assignedId], references: [id])
}

model DVR {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  executiveId    String   @db.ObjectId
  feedback       String
  location       String

  executive      FieldExecutive @relation(fields: [executiveId], references: [id])
}

model DeliveryReport {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  product      String
  quantity     Int
  isForecasted Boolean
  submittedAt  DateTime

  user         User     @relation(fields: [userId], references: [id])
}

model Order {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  status      OrderStatus
  orderDate   DateTime
  orderItems  OrderItem[]
  invoice     Invoice?

  user        User         @relation(fields: [userId], references: [id])
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  productId  String   @db.ObjectId
  quantity   Int
  unitPrice  Float

  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Invoice {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @unique @db.ObjectId
  invoiceDate DateTime
  totalAmount Float
  pdfUrl      String

  order      Order    @relation(fields: [orderId], references: [id])
}

model LiveLocation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  latitude   Float
  longitude  Float
  timeStamp  DateTime

  user       User     @relation(fields: [userId], references: [id])
}

model ShiftAlert {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  createdAt DateTime @default(now())
  acknowledged Boolean @default(false)

  user      User     @relation(fields: [userId], references: [id])
}
<<<<<<< HEAD
=======

model RegisterWarranty {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  productId      String   @db.ObjectId
  serialNumber   String   @unique
  purchaseDate   DateTime
  warrantyMonths Int
  sellerId       String   @db.ObjectId
  registeredAt   DateTime @default(now())

  product        Product  @relation(fields: [productId], references: [id])
  seller         User     @relation(fields: [sellerId], references: [id])
}

model PostDeliveryReport {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  product      String
  quantity     Int
  submittedAt  DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
}

model CommissionedWork {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  latitude    Float
  longitude   Float
  qrImage     Bytes    // BSON Binary for storing QR code image
  appliedAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}
>>>>>>> 04113530de9832f4179ec37bc2135fedf490d6b5
